server {
    listen 443 ssl; # server
    # listen 443 quic; # server
    add_header Strict-Transport-Security "max-age=63072000" always;
    # add_header Alt-Svc 'h3=":443"; ma=86400';

    server_name example.net; # server

    include cert/cert.conf;
    access_log /var/log/nginx/example.net/access.log combined; # http, server, location, if in location, limit_except
    # auth_delay 5s; # http, server, location
    # 延迟处理未经授权的请求，使用 401 响应代码以防止在通过密码、子请求的结果或 JWT 限制访问时发生时间攻击。

    # client_max_body_size 100m; # http, server, location
    # 设置客户端请求体的最大允许大小。对于大文件上传很有用。

    # keepalive_timeout timeout [header_timeout]; # http, server, location
    # fastcgi_connect_timeout 75s; # http, server, location
    # 定义与 FastCGI 服务器建立连接的超时时间。需要注意的是，这个超时时间通常不能超过 75 秒。
    # fastcgi_hide_header field; # http, server, location
    # 默认情况下，nginx 不会将 FastCGI 服务器响应中的“Status”和“X-Accel-...”头字段传递给客户端。 fastcgi_hide_header 指令设置将不会被传递的附加字段。相反，如果需要允许字段的传递，可以使用 fastcgi_pass_header 指令。
    # fastcgi_pass_header field; # http, server, location
    # fastcgi_ignore_headers field ...; # http, server, location
    # 禁用来自 FastCGI 服务器的某些响应头字段的处理。
    fastcgi_index index.php; # http, server, location

    # fastcgi_intercept_errors on; # http, server, location
    # 确定 FastCGI 服务器响应的状态码是否大于或等于 300，应该传递给客户端，还是被拦截并重定向到 nginx 进行处理，使用 error_page 指令。
    # fastcgi_keep_conn on; # http, server, location
    # fastcgi_param parameter value [if_not_empty]; # http, server, location
    # 设置一个 parameter ，该值应传递给 FastCGI 服务器。 value 可以包含文本、变量及其组合。如果当前级别没有定义 fastcgi_param 指令，则这些指令将从上一个配置级别继承。
    # PHP 的最低必需设置：
    fastcgi_param SCRIPT_FILENAME /home/www/scripts/php$fastcgi_script_name;
    fastcgi_param QUERY_STRING $query_string;
    # SCRIPT_FILENAME 参数用于 PHP 中确定脚本名称，而 QUERY_STRING 参数用于传递请求参数。
    # 对于处理 POST 请求的脚本，还需要以下三个参数：
    fastcgi_param REQUEST_METHOD $request_method;
    fastcgi_param CONTENT_TYPE $content_type;
    fastcgi_param CONTENT_LENGTH $content_length;
    location / {
        fastcgi_pass http://127.0.0.1:; # location, if in location
        # fastcgi_pass unix:/tmp/fastcgi.socket;
    }
}